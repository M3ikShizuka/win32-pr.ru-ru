### YamlMime:FAQ
metadata:
  description: эта статья содержит рекомендации и часто задаваемые вопросы о создании и регистрации обработчиков свойств для работы с системой свойств Windows.
  ms.assetid: E583A00B-F615-41c8-AECF-061F1396DB9A
  title: Рекомендации и вопросы и ответы по обработчикам свойств
  ms.topic: article
  ms.date: 05/31/2018
  ms.openlocfilehash: 6e1b7d22516b1573562b25f2889b6d1ba703483c
  ms.sourcegitcommit: ecd0ba4732f5264aab9baa2839c11f7fea36318f
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 07/07/2021
  ms.locfileid: "113483673"
title: Рекомендации и вопросы и ответы по обработчикам свойств
summary: >
  в этом разделе объясняется, как создавать и регистрировать обработчики свойств для работы с системой свойств Windows.


  Этот раздел организован следующим образом:


  -   [Рекомендации](#best-practices)
      -   [Переопределение свойств файловой системы](#overriding-file-system-properties)
      -   [Хранение свойств в форматах файлов на основе XML](#storing-properties-in-xml-based-file-formats)
      -   [Вычисленные свойства](#computed-properties)
  -   [Часто задаваемые вопросы](#frequently-asked-questions)

  -   [См. также](#related-topics)
sections:
- name: Рекомендации
  questions:
  - question: >
      Переопределение свойств файловой системы
    answer: >
      Некоторые свойства файлов предоставляются источником данных файловой системы, например:


      -   \_Имя файла PKEY

      -   \_Расширение PKEY

      -   PKEY \_ ModifiedTime


      Как правило, обработчики свойств не могут предоставлять значения для этих свойств. Однако в некоторых случаях эти свойства могут быть переопределены на основе сведений о регистрации, предоставленных обработчиком свойств. Обработчики свойств заполняют **\_ классы hKey \_ корневого** \\ **CLSID** \\ *{handler CLSID}* \\ **оверридефилесистемпропертиес** именами свойств, которые требуется переопределить. Это ограничено фиксированным набором свойств, показанных в следующем списке, в котором система имеет набор знаний.


      Переопределение поддерживается для следующих значений свойств:


      -   [System. Kind](./props-system-kind.md)

      -   [System. имя_файла](./props-system-filename.md)

      -   [System. Испиннедтонамеспацетри](./props-system-ispinnedtonamespacetree.md)

      -   [System.ItemNameDisplay](./props-system-itemnamedisplay.md)

      -   [System. Сфгаофлагс](./props-system-sfgaoflags.md)

      -   [System. Итемпасдисплай](./props-system-itempathdisplay.md)

      -   [System. Итемпасдисплайнарров](./props-system-itempathdisplaynarrow.md)

      -   [System. Итемфолдернамедисплай](./props-system-itemfoldernamedisplay.md)

      -   [System. Итемфолдерпасдисплай](./props-system-itemfolderpathdisplay.md)

      -   [System. Итемфолдерпасдисплайнарров](./props-system-itemfolderpathdisplaynarrow.md)


      Полный список всех свойств оболочки см. в разделе [свойства оболочки](./props.md).


      > [!IMPORTANT]

      > Переопределенные значения свойств используются только при индексировании файлов. Таким путем, просмотр файлов из источника данных файловой системы не приводит к раскрытию переопределенных значений.

       
  - question: >
      Хранение свойств в форматах файлов на основе XML
    answer: >
      Существует два основных варианта хранения свойств в форматах файлов на основе XML:


      -   Сохраните каждое свойство, используя XML-элементы и атрибуты в соответствии со схемой XML документа. Этот подход является более «XML-понятным».

      -   Выполните сериализацию всего хранилища свойств в большой двоичный объект в памяти (BLOB), преобразуйте большой двоичный объект в строку в кодировке Base64, а затем сохраните эту строку в XML. Это более простой из двух подходов и может использоваться для упрощенного предоставления поддержки открытых метаданных.


      Некоторые обработчики могут сочетать эти подходы, сохраняя некоторые важные значения в стандартном формате XML и сохраняя остальные в большом двоичном объекте, например.
  - question: >
      Вычисляемые свойства
    answer: >
      Некоторые свойства являются производными от определенных атрибутов файла. Например, свойство [System. Image. Dimensions](./props-system-image-dimensions.md) определяется фактическими размерами изображения в файле изображения. Так как эти значения свойств не могут быть изменены обработчиком свойств, они помечаются `isInnate="true"` в описании свойства. Другие свойства вычисляются из части определенного свойства или путем статистической обработки значений нескольких свойств. Поскольку обновления для этих "вычисленных" свойств могут привести к неоднозначности при изменении значений "Source", вычисленные свойства должны быть помечены `isInnate="true"` в описании свойства или переданы только для чтения. Второй вариант доступен путем указания обработчику возвращать S \_ false из [**ипропертисторекапабилитиес:: испропертивритабле**](/windows/win32/api/propsys/nf-propsys-ipropertystorecapabilities-ispropertywritable).
- name: Вопросы и ответы
  questions:
  - question: >
      почему обработчик Windowsного поиска не загружает дескриптор моего свойства?
    answer: >
      индексатор поиска Windows запускается как системная служба и не может загружать библиотеки dll, которые хранятся в каталоге профиля пользователя. если сборка и отладка выполняется с помощью Microsoft Visual Studio, то библиотека DLL будет размещена в профиле пользователя (и, следовательно, не будет загружена индексатором). Чтобы обойти это, Скопируйте библиотеку DLL вне папки профиля (например, в **C: \\ Program Files \\ YourAppName**) и зарегистрируйте ее там.


      более конкретные рекомендации по разработке обработчиков свойств для работы с индексатором поиска Windows см. в разделе [разработка обработчиков свойств для Windows поиска](../search/-search-3x-wds-extidx-propertyhandlers.md).
  - question: >
      Какие свойства должны обнаруживаться с помощью методов перечисления "Ипропертисторе:: NOCOUNT" и "Ипропертисторе:: GetAt"?
    answer: "Эти методы используются не всеми клиентами объектов хранилища свойств. Некоторые клиенты знают о свойствах, которые планируется запрашивать напрямую (по имени PKEY), или получать сведения о свойствах с помощью списка описания свойства. Методы обнаружения свойств встроенная несколько других сценариев. Если свойству не требуется участвовать в этих сценариях, его не нужно перечислять. Таким образом, обработчик свойства может создать \\_ пустое значение, отличное от VT, для свойств, которые не обнаруживаются с помощью методов [**ипропертисторе:: NOCOUNT**](/previous-versions/windows/desktop/legacy/bb761472(v=vs.85)) и [**ипропертисторе:: GetAt**](/previous-versions/windows/desktop/legacy/bb761471(v=vs.85)) .\n\nОднако свойства должны быть видимыми через эти методы, если выполняются следующие условия.\n\n- **Если свойство индексируется так, чтобы оно было доступно для поиска:** это означает, что оно включено в хранилище свойств поиска Windows (обозначено `isColumn = \"true\"` в схеме описания свойства) или доступно для полнотекстового поиска ( `inInvertedIndex = \"true\"` ). При отсутствии этих флагов или отсутствия описания свойства свойства типа \"строка\" будут автоматически добавлены в инвертированный индекс, чтобы обеспечить возможность поиска. Поскольку список известных свойств (с описаниями установленных свойств) в системе свойств очень большой (более 800 свойств), было бы нецелесообразным задавать каждый обработчик свойств для каждого свойства, зарегистрированного в системе свойств. Вместо этого процесс индексирования перечисляет соответствующие свойства из обработчика свойств для каждого элемента, который он индексирует, и использует значения перечислимых свойств для создания полнотекстового индекса.\n- Значение **, если свойство должно быть скопировано при дублировании набора свойств элемента:** Чтобы реализовать функцию \"Копировать набор свойств\", исходный элемент делает свойства, которые должны быть скопированы, видимыми с помощью методов [**ипропертисторе:: NOCOUNT**](/previous-versions/windows/desktop/legacy/bb761472(v=vs.85)) и [**Ипропертисторе:: GetAt**](/previous-versions/windows/desktop/legacy/bb761471(v=vs.85)) . Не следует включать свойства, которые не нужно копировать или копировать в смысл.\n- **Если значение свойства не пусто (VT \\_ Empty):** пустые значения свойств не подходят для клиентов. Когда клиенты пытаются вернуть пустые значения свойств, возвращается значение VT \\_ Empty. Поэтому не следует перечислять свойства с пустыми значениями.\n-   Значение **, если свойство должно быть удалено при вызове функции \"Remove Properties\":** Эта функция существует для защиты конфиденциальности. Он находит все значения из обработчика свойств через перечисление и удаляет каждое из них, выбранное для удаления пользователем.\n> [!Note]  \n> Перечисление свойств не передает набор свойств, поддерживаемых определенным обработчиком свойств, если обработчик поддерживает фиксированную схему (а не открытые метаданные). Вместо этого такие обработчики должны документировать набор свойств, которые они поддерживают.\n\n \n"
  - question: >
      Разделы справки выяснить, какие форматы файлов поддерживают открытые метаданные?
    answer: >
      Дополнительные сведения о поддержке открытых метаданных см. в разделе "типы файлов, поддерживающие открытые метаданные" раздела [типы файлов](../shell/fa-file-types.md).
  - question: >
      Можно ли VT_NULL сохранить значения с помощью обработчика свойства?
    answer: >
      Нет. \_Значения NULL VT будут преобразованы в VT \_ Empty при вызовах функций [**Ипропертисторе:: GetValue**](/previous-versions/windows/desktop/legacy/bb761473(v=vs.85)) и [**ипропертисторе:: SetValue**](/previous-versions/windows/desktop/legacy/bb761475(v=vs.85)).
  - question: >
      Какие форматы строк даты поддерживаются функцией "Пропвариантчанжетипе"?
    answer: >
      Как правило, свойства, представляющие значения даты и времени, должны быть представлены с помощью VT \_ fileTime. Однако многие источники данных предоставляют эту информацию в виде строки. Вспомогательный API [**пропвариантчанжетипе**](/windows/win32/api/propvarutil/nf-propvarutil-propvariantchangetype) поддерживает приведение некоторых строковых форматов даты к значениям [**fileTime**](/windows/win32/api/minwinbase/ns-minwinbase-filetime) , как показано в следующей таблице.




      | Формат                  | Windows windows Vista, Windows XP и Microsoft Windows Desktop Search (WDS) | Windows 7 | Примечания                                                                                                                                                                                                 |

      |-------------------------|-----------------------------------------------------------------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

      | гггг/мм/дд: чч: мм: СС. ууу | Да                                                                   | Да       | ФОРМАТА y = year, m = месяц, d = Дата, h = часы (24-часовой формат), m = минуты, s = секунды, u = микросекунды                                                                                                           |

      | гггг-мм-ddThh: мм: ссZ    | Нет                                                                    | Да       | **Спецификация формата ISO8601** Время в формате UTC (обозначено индикатором часового пояса "Z"); y = year, m = месяц, d = Дата, h = часы (24-часовой формат), m = минуты, s = секунды; 'T ' является разделителем для временной части.<br/> |
  - question: >
      Можно ли создать обработчик свойств только для чтения?
    answer: >
      Да. Некоторые реализации обработчиков свойств не поддерживают запись значений свойств. Эти обработчики свойств должны возвращать СТГМ \_ E \_ ACCESSDENIED при вызовах **Иинитиализекскскс:: Initialize** , прошедших стгм \_ ReadWrite, или при любом вызове метода [**ипропертисторе:: SetValue**](/previous-versions/windows/desktop/legacy/bb761475(v=vs.85)).


      Все обработчики свойств, открытые в \_ режиме чтения стгм, должны возвращать стгм \_ E \_ ACCESSDENIED при вызовах [**ипропертисторе:: SetValue**](/previous-versions/windows/desktop/legacy/bb761475(v=vs.85)).
  - question: >
      Может ли обработчик свойства обрабатывать свойство как доступное только для чтения, даже если схема указывает, что свойство доступно для записи?
    answer: "Да. В системе схемы свойства записываются как доступные только для чтения (включая элементы с `isInnate = \"true\"` ) или для чтения и записи. Обработчики свойств, которые не поддерживают запись определенного свойства, которое должно быть доступно для записи в схеме, должны реализовывать [**ипропертисторекапабилитиес**](/windows/win32/api/propsys/nn-propsys-ipropertystorecapabilities) и возвращать \\_ значение false для вызовов [**ипропертисторекапабилитиес:: испропертивритабле**](/windows/win32/api/propsys/nf-propsys-ipropertystorecapabilities-ispropertywritable) для этого свойства. Это означает, что в контексте этого обработчика и этого файла свойство недоступно для записи.\n\n> [!Note]  \n> Обратная операция невозможна. Нельзя включить обработчик свойств для записи свойства, которое помечено как доступное только для чтения в схеме\n"
additionalContent: "\n## <a name=\"related-topics\"></a>Связанные темы\n\n[Основные сведения о обработчиках свойств](./building-property-handlers-properties.md)\n\n[Использование имен видов](./building-property-handlers-user-friendly-kind-names.md)\n\n[Использование списков свойств](./building-property-handlers-property-lists.md)\n\n[Инициализация обработчиков свойств](./building-property-handlers-property-handlers.md)\n\n[Регистрация и распространение обработчиков свойств](./prophand-reg-dist.md)"
