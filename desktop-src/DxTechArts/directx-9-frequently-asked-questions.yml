### YamlMime:FAQ
metadata:
  title: Часто задаваемые вопросы о DirectX
  description: Эта статья содержит набор часто задаваемых вопросов о Microsoft DirectX.
  ms.assetid: 58d9fe45-a2c7-8280-2826-e2e14ecea983
  ms.topic: article
  ms.date: 05/31/2018
  ms.openlocfilehash: 9522843268b34daca6ff944a556c10d16ff731fa
  ms.sourcegitcommit: adba238660d8a5f4fe98fc6f5d105d56aac3a400
  ms.translationtype: MT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 06/09/2021
  ms.locfileid: "111852751"
title: Часто задаваемые вопросы о DirectX
summary: >
  Эта статья содержит набор часто задаваемых вопросов о Microsoft DirectX.
sections:
- name: Общие вопросы разработки DirectX
  questions:
  - question: >
      Должны ли разработчики игр, в действительности, позаботиться о поддержке 64-разрядных версий?
    answer: >
      Конечно. Технология x64 широко доступна на рынке. Большинство новых процессоров, проданных за последние несколько лет, и почти все процессорные линии в разработке с помощью процессоров AMD и Intel, поддерживают 64-разрядную архитектуру. В выпуске Windows XP Professional x64 Edition появилась технология поддержки ОС для x64, выпущенная в апреле 2005. Поскольку для версий x64 требуется новое поколение 64-разрядных драйверов машинного кода, первый выпуск был ограничен дистрибутивом OEM.


      Благодаря Windows Vista клиенты могут выбрать один из 32-разрядных или 64-разрядных выпусков при покупке компьютеров под управлением Windows, а лицензии для Windows Vista действительны как для 32-разрядных, так и для 64-разрядных выпусков операционной системы. Кроме того, в окне доступны многие 64-разрядные драйверы, а изготовители устройств должны предоставить как можно более 32-разрядный и 64-разрядный драйвер в рамках программы сертификации Windows.


      Все эти факторы значительно увеличивают число развертываний 64-разрядных выпусков Windows. По мере того как новые компьютеры начинают поставляться с объемом физической памяти более 2 ГБ, стимул использования 32-разрядной операционной системы значительно уменьшается в пользу 64-разрядных выпусков. 64-разрядная технология полностью поддерживает 32-разрядный машинный код, хотя 64-разрядные машинные реализации необходимы для использования всех преимуществ нового пространства в памяти 64-bit. Каждое 32-разрядное приложение должно иметь совместимость с 64-разрядной версией в соответствии с минимальным требованием к доставке, и это требование является базовым требованием для совместимости с Windows Vista. Несовместимость обычно возникает из-за использования 16-разрядного кода, предназначенного для операционной системы Windows 3,1, или установки драйверов, которые не предоставляются в собственных формах с 32 и 64.


      Дополнительные сведения о 64-разрядной технологии см. в разделе [64-разрядное программирование для разработчиков игр](/windows/desktop/DxTechArts/sixty-four-bit-programming-for-game-developers).
  - question: >
      Должны ли разработчики игр по-прежнему публиковать игры для Windows 95, Windows 98 или Windows ME?
    answer: >
      Больше не существует по двум причинам: производительности и набору функций.


      Если минимальная скорость ЦП, необходимая для игры, составляет 1,2 ГГц или выше (что чаще всего используется для наименований с высоким уровнем производительности), то большинство соответствующих компьютеров будет работать под управлением Windows XP. По мере продажи компьютеров с тактовой частотой выше 1,2 ГГц, Windows XP была установлена как операционная система по умолчанию практически всеми производителями. Это означает, что в Windows XP существует множество функций, которые современные разработчики игр должны использовать:


      -   Улучшенная многозадачность, которая обеспечивает более гладкую и удобную работу с видео, аудио и играми.

      -   Более стабильная модель видеодрайверов, которая позволяет упростить отладку, воспроизводить более гладкую игру и повысить производительность.

      -   Упрощенная настройка для работы в сети, которая обеспечивает более простой доступ к играм с несколькими игроками.

      -   Поддержка передачи по каналу DMA по умолчанию с жестких дисков, что приводит к более гладкому и ускоренному загрузке приложений.

      -   Отчеты об ошибках Windows, которые приводят к более стабильной операционной системе, драйверам и приложениям.

      -   Поддержка Юникода. Это значительно упрощает локализацию.

      -   Улучшенная безопасность и стабильность, что приводит к повышению эффективности работы потребителей.

      -   Улучшенная поддержка современного оборудования, большинство из которых больше не использует драйверы Windows 98.

      -   Улучшенное управление памятью, что приводит к повышению стабильности и безопасности.

      -   Улучшена файловая система NTFS, которая более устойчива к сбоям и обеспечивает лучшую производительность с помощью функций безопасности.
  - question: >
      Должны ли разработчики игр по-прежнему публиковать игры для Windows 2000?
    answer: >
      Только не это. В дополнение к причинам, перечисленным в разделе, **разработчики игр по-прежнему публикуют игры для windows 95, windows 98 или Windows Me?** Windows 2000 не имеет следующих возможностей:


      -   Windows XP поддерживает дополнительные функции процессора, такие как технология Hyper-Threading, многоядерная архитектура и архитектура x64.

      -   Windows XP поддерживает параллельные компоненты, что значительно сокращает число конфликтов при управлении версиями приложений.

      -   Windows XP поддерживает невыполнение защиты памяти, что помогает предотвратить вредоносные программы и может помочь в отладке.

      -   В Windows XP улучшена поддержка видеоадаптеров с поддержкой AGP и PCI Express.

      -   Windows XP поддерживает быстрое переключение пользователей, удаленный рабочий стол и удаленный помощник, что может помочь снизить затраты на поддержку продукта.

      -   Средства производительности, такие как PIX (в пакете SDK для разработчиков DirectX), больше не поддерживают Windows 2000.


      Вкратце, Windows 2000 не разрабатывалась или не является потребительской операционной системой.
  - question: >
      Каковы различия между различными выпусками Windows Vista? Как они влияют на приложение DirectX?
    answer: >
      Семейство Windows Vista включает в себя пять выпусков:


      -   Windows Vista Home Basic

      -   Windows Vista Home Premium

      -   Windows Vista Business

      -   Windows Vista Enterprise

      -   Windows Vista Ultimate


      Домашняя базовая и Домашняя расширенная — ориентированные на потребителей версии с такими функциями, как семейная безопасность (прежнее название — родительский контроль), а Домашняя расширенная — Media Center. Business и Enterprise — это ориентированные на предприятия выпуски с такими функциями, как присоединение к домену и удаленный рабочий стол/службы терминалов. В выпуске Ultimate в одну версию объединяются все функции потребительской и корпоративной выпусков. Все выпуски входят в выпуски 32-bit (x86) и 64-bit (x64), и пользователи могут использовать один и тот же идентификатор продукта для обеих платформ.


      Технология, лежащая в основе различных выпусков, идентична, и все они имеют одинаковую версию среды выполнения DirectX и других компонентов. Однако у выпусков есть несколько незначительных отличий относительно игр:


      -   Обозреватель игр существует во всех выпусках, но ярлык "игры" в меню "Пуск" доступен только в Домашняя базовая, Домашняя расширенная и максимальная. Обозреватель игр по-прежнему можно найти во всех выпусках (нажмите кнопку Пуск, укажите пункт Все программы, а затем выберите пункт игры), а затем функции интерфейса Игамиксплорер во всех выпусках.

      -   Игры, включенные в Windows, по умолчанию недоступны для бизнеса и предприятия, но могут быть включены администратором.

      -   Семейная безопасность и рейтинги игр не отображают и не влияют на поведение бизнеса или предприятия и отключены в режиме "в сети" при присоединении к домену.


      Параметры управления учетными записями пользователей имеют одинаковые значения по умолчанию во всех выпусках, но их можно переопределить с помощью параметров групповая политика для домена в Business, Enterprise и Ultimate. Например, параметр политики Контроль учетных записей: поведение запроса на повышение прав для стандартных пользователей может быть настроено на автоматическое отклонение запросов на повышение прав во многих бизнес-параметрах для повышения безопасности, и многие пользователи в этих средах всегда будут работать как обычные пользователи без возможности даже запуска от имени администратора. Любая программа (например, установщик), которая требует прав администратора из-за обнаружения устаревших настроек или наличия манифеста, указывающего требуемый уровень выполнения, как "requireAdministrator", всегда не запускается в таких ситуациях. Другие параметры политики, такие как управление учетными записями пользователей: повышать права только для подписанных и проверенных исполняемых файлов, также могут препятствовать работе установщика, если вы не подписываете исполняемый файл с помощью Authenticode.


      Эти типы изменений политик могут применяться к любому выпуску Windows Vista, но скорее всего, на компьютерах, присоединенных к домену.
  - question: "Каковы различия между различными выпусками Windows 7? Как они влияют на приложение DirectX? \n"
    answer: >
      Большинство пользователей Windows 7, скорее всего, будут иметь один из двух выпусков: Windows 7 Домашняя расширенная, для домашних пользователей или Windows 7 Профессиональная для бизнес-пользователей и разработчиков. Для крупных организаций существует Windows 7 Enterprise Edition с корпоративной лицензией, которая включает все функции Windows 7. Windows 7 Ultimate — это розничный аналог этого выпуска.


      Windows 7 Starter Edition доступна по всему миру, и предполагается, что она будет развернута примарли на нетбуках, а также на портативных компьютерах с Ultra-низким энергопотреблением. Windows 7 Домашняя базовая доступна только на новых рынках.


      Обратите внимание, что все выпуски Windows 7 (кроме выпуска Starter Edition) доступны как для 32-разрядных (x86), так и для 64-разрядных (x64) версий, а все розничные пакеты Windows 7 включают носители для обеих версий. Как и в Windows Vista, пользователи могут использовать один и тот же идентификатор розничного продукта на любой платформе.


      Базовая технология в различных выпусках идентична, и все выпуски имеют одну и ту же версию среды выполнения DirectX и других компонентов. У них есть несколько отличий относительно игр.


      -   Обозреватель игр доступен во всех выпусках, но ярлык "игры" в меню "Пуск" по умолчанию скрыт в Windows 7 Профессиональная и Корпоративная. Обозреватель игр по-прежнему можно найти в меню «Пуск» (щелкнув все программы, затем дважды щелкнув «игры»), и пользователь может включить ярлык «прямые игры».

      -   Игры, включенные в Windows, недоступны по умолчанию в Windows 7 Профессиональная и Корпоративная, но они могут быть включены администратором.

      -   Семейная безопасность и рейтинги игр доступны во всех выпусках, но они отключены в Windows 7 Профессиональная, Корпоративная и максимальная, когда операционная система присоединяется к домену. Как и в Windows Vista Ultimate, эту функцию можно включить повторно на компьютере, который присоединился к домену.


      Параметры управления учетными записями пользователей (UAC) могут зависеть от параметров групповая политика в выпусках Windows 7 Профессиональная, Enterprise и Ultimate, подобно Windows Vista. Дополнительные сведения см **. в разделе различия между различными выпусками Windows Vista. Как они влияют на приложение DirectX?**
  - question: "Будет ли DirectX 10 доступен для Windows XP? \n"
    answer: >
      Нет. Windows Vista с DirectX 10 включает обновленную среду выполнения DirectX на основе среды выполнения в пакете обновления 2 (SP2) для Windows XP (DirectX 9.0 c) с изменениями для работы с новой моделью драйвера экрана Windows (WDDM) и новым стеком драйверов аудио, а также с другими обновлениями в операционной системе. Помимо Direct3D 9, Windows Vista поддерживает два новых интерфейса при наличии правильного оборудования и драйверов для видео: Direct3D9Ex и Direct3D10.


      Поскольку эти новые интерфейсы полагаются на технологию WDDM, они никогда не будут доступны в более ранних версиях Windows. Все остальные изменения, вносимые в технологии DirectX для Windows Vista, также относятся к новой версии Windows. Имя DirectX 10 является ошибочным в том, что многие технологии, поставляемые в пакете SDK DirectX (КСИНПУТ, D3DX), не охватываются этим номером версии. Таким образом, обращение к номеру версии среды выполнения DirectX в целом потеряет значительную часть его значения, даже для 9.0 c. Средство диагностики DirectX (DXdiag.exe) в Windows Vista сообщает о DirectX 10, но в действительности это относится только к Direct3D 10.
  - question: "Будет ли выпущен DirectX 11 для Windows Vista или Windows XP? \n"
    answer: >
      DirectX 11 встроен в Windows 7 и доступен в виде обновления для Windows Vista (см <https://go.microsoft.com/fwlink/p/?linkid=160189> .). Сюда входит API Direct3D 11, графическая инфраструктура DirectX (DXGI) 1,1, 10Level9 уровни компонентов, платформа Windows Advanced растеризации (ДЕФОРМАЦИЯ) 10 устройство отрисовки программного обеспечения, Direct2D, DirectWrite и обновление API Direct3D 10,1 для поддержки 10Level9 и деформации 10.


      По тем же причинам, которые были указаны в предыдущем вопросе (**DirectX 10 будет доступен для Windows XP?** ), Direct3D 11 и связанные API недоступны в Windows XP.
  - question: "Что случилось с DirectShow? Я не могу найти его в пакете SDK для DirectX. \n"
    answer: >
      DirectShow была удалена из пакета SDK DirectX по состоянию на апрель 2005. Вы можете получить заголовки, библиотеки, инструменты и примеры для DirectShow в пакете средств разработки программного обеспечения Windows (прежнее название — Platform SDK). Директсетуп в пакете SDK для DirectX поддерживает перераспределение системных компонентов DirectShow, а последние компоненты уже установлены в следующих операционных системах: Microsoft Windows XP с пакетом обновления 2, Windows XP Professional x64 Edition, Windows Server 2003 с пакетом обновления 1 (SP1) и Windows Vista.
  - question: "Какие изменения были внесены в среду выполнения DirectX для Windows Vista? \n"
    answer: >
      Для поддержки новой модели WDDM были внесены основные изменения. Дополнительные сведения о новой модели драйверов, о влиянии на Direct3D 9 и двух новых графических интерфейсах: Direct3D 9Ex и Direct3D 10, см. [в подразделах API графики в Windows](/windows/desktop/direct3darticles/graphics-apis-in-windows-vista). Новые графические API для Windows 7 — Direct3D 11, Direct2D, DirectWrite, DXGI 1,1 и обновленный Direct3D 10.1 — доступны в виде обновления для Windows Vista (см <https://go.microsoft.com/fwlink/p/?linkid=160189> .).


      Пакет обновления 1 (SP1) для Windows Vista содержит обновленную версию среды выполнения DirectX. Это обновление дополняет поддержку Windows Vista для включения Direct3D 10,1, предоставляя новые дополнительные аппаратные функции. (Все оборудование, поддерживающее Direct3D 10,1, также полностью поддерживает все функции Direct3D 10.)


      DirectSound был обновлен для предоставления возможностей нового стека Windows Vista Audio Driver, который поддерживает буферы программного обеспечения с несколькими каналами. Интерфейс API сохраненного режима Direct3D полностью удален из Windows Vista. Кроме того, служба DirectPlay Voice также была удалена, а также вспомогательной функции NAT для Директинпут и пользовательского интерфейса сопоставителя действий. Поддержка интерфейсов DirectX 7 и DirectX 8 для Visual Basic 6,0 недоступна в Windows Vista.
  - question: "Какие изменения были внесены в среду выполнения DirectX для Windows 7? \n"
    answer: >
      В состав Windows 7 входят все компоненты среды выполнения DirectX, имеющиеся в Windows Vista, и добавлены функции Direct3D 11, DXGI 1,1, 10Level9, WARP10 Software, Direct2D, DirectWrite и обновление для Direct3D 10,1 для поддержки 10Level9 и WARP10. Дополнительные сведения см. [в статье графические API в Windows](/windows/desktop/direct3darticles/graphics-apis-in-windows-vista).


      Все остальные компоненты идентичны Windows Vista, с 64 добавлением 64-разрядной (x64) собственной поддержки основного API DirectMusic, связанного с меткой времени MIDI. Уровень производительности DirectMusic остается устаревшим и доступен только для 32-разрядных приложений в Windows 7 для обеспечения совместимости приложений. Обратите внимание, что 64-разрядная собственная поддержка DirectMusic недоступна в Windows Vista.
  - question: "Я думаю, что обнаружена ошибка драйвера, что я делаю? \n"
    answer: >
      Сначала убедитесь, что результаты проверены с помощью средства программной прорисовки. Затем проверьте результаты с помощью последней сертифицированной версии WHQL драйвера IHV. Вы можете программно проверить состояние WHQL с помощью метода Жетадаптеридентифиер () в интерфейсе IDirect3D9, передав \_ \_ флаг уровня лаборатории D3DENUM.
  - question: "Почему при попытке компиляции образцов появляется много сообщений об ошибках? \n"
    answer: >
      Возможно, неправильно задан путь к включаемым файлам. Многие компиляторы, в том числе Microsoft Visual C++, включают более раннюю версию пакета SDK, поэтому если во время поиска включаемых файлов в стандартном компиляторе выполняется поиск каталогов в первую очередь, будут получены неверные версии файлов заголовков. Чтобы устранить эту проблему, убедитесь в том, что для пути к включаемым файлам и библиотекам задано предварительное поиск путей к файлам и библиотекам Microsoft DirectX. См. также файл dxreadme.txt в пакете SDK. Если вы устанавливаете пакет SDK для DirectX и используете Visual C++, установщик может дополнительно настроить пути включения.
  - question: "Я получаю ошибки компоновщика о нескольких или отсутствующих символах для глобальных уникальных идентификаторов (GUID), что я делаю? \n"
    answer: >
      Различные используемые идентификаторы GUID должны быть определены один раз и только один раз. Определение идентификатора GUID будет вставлено, если вы \# определили символ инитгуид перед включением файлов заголовков DirectX. Поэтому следует убедиться, что это происходит только в одной единице компиляции. Альтернативой этому методу является связывание с библиотекой дксгуид. lib, которая содержит определения всех идентификаторов GUID DirectX. При использовании этого метода (рекомендуется) никогда не следует \# определять символ инитгуид.
  - question: "Можно ли привести указатель к интерфейсу DirectX к более низкому номеру версии? \n"
    answer: >
      Нет. Интерфейсы DirectX являются COM-интерфейсами. Это означает, что для более высоких пронумерованных интерфейсов нет необходимости в порождении соответствующих более низких пронумерованных. Таким образом, единственным надежным способом получения другого интерфейса для объекта DirectX является использование метода QueryInterface интерфейса. Этот метод является частью стандартного интерфейса IUnknown, от которого должны наследоваться все COM-интерфейсы.
  - question: "Можно ли смешивать компоненты DirectX 9 и DirectX 8 или более ранних версий в рамках одного приложения? \n"
    answer: >
      Можно свободно смешивать разные компоненты разной версии. Например, можно использовать Директинпут 8 с Direct3D 9 в одном приложении. Однако обычно нельзя смешивать разные версии одного компонента в одном приложении. Например, вы не можете смешивать DirectDraw 7 с Direct3D 9 (так как они фактически являются одним и тем же компонентом, когда DirectDraw был относящиеся в Direct3D на DirectX 8). Однако существуют исключения, такие как использование Direct3D 9 и Direct3D 10 вместе в одном приложении, которое разрешено.
  - question: "Можно ли сочетать использование Direct3D 9 и Direct3D 10 в одном приложении? \n"
    answer: >
      Да, вы можете использовать эти версии Direct3D вместе в одном приложении.
  - question: "Что означают возвращаемые значения из методов выпуска или AddRef? \n"
    answer: >
      Возвращаемое значение будет текущим счетчиком ссылок объекта. Однако спецификация COM указывает, что не следует полагаться на это, и значение обычно доступно только для целей отладки. Наблюдаемые значения могут быть неожиданными, так как другие системные объекты могут хранить ссылки на создаваемые объекты DirectX. По этой причине не следует писать код, который вызывает повторный вызов метода Release до тех пор, пока значение счетчика ссылок не будет равно нулю, так как объект может быть освобожден даже несмотря на то, что другой компонент по-прежнему может ссылаться на него.
  - question: "Имеет ли дело порядок выпуска интерфейсов DirectX? \n"
    answer: >
      Не имеет значения, так как COM-интерфейсы подсчитываются. Однако существуют некоторые известные ошибки с порядком выпуска интерфейсов в некоторых версиях DirectX. В целях безопасности рекомендуется освобождать интерфейсы в порядке создания обратных заказов, когда это возможно.
  - question: "Что такое интеллектуальный указатель и следует ли его использовать? \n"
    answer: >
      Интеллектуальный указатель — это класс шаблона C++, предназначенный для инкапсуляции функций указателя. В частности, существуют стандартные классы интеллектуальных указателей, предназначенные для инкапсуляции указателей на интерфейсы COM. Эти указатели автоматически выполняют QueryInterface вместо приведения и обрабатывали AddRef и Release. Следует ли использовать их, в основном это вопрос. Если код содержит большое количество копирований указателей интерфейса с несколькими AddRef и выпусками, то интеллектуальные указатели, вероятно, сделают ваш код менее подверженным ошибкам. В противном случае это можно сделать без них. Visual C++ включает стандартный интеллектуальный указатель Microsoft COM, определенный в файле заголовков "comdef. h" (поиск \_ \_ в справке com PTR t).
  - question: "У меня возникли проблемы при отладке моего приложения DirectX? \n"
    answer: >
      Наиболее распространенной проблемой при отладке приложений DirectX является попытка отладки, когда поверхность DirectDraw заблокирована. Такая ситуация может вызвать блокировку Win16 на системах Microsoft Windows 9x, которая не позволяет закрасить окно отладчика. Указание \_ флага НОСИСЛОКК D3DLOCK при блокировке поверхности обычно может устранить эту необходимость. Windows 2000 не страдает от этой проблемы. При разработке приложения полезно работать с отладочной версией среды выполнения DirectX (выбирается при установке пакета SDK), которая выполняет некоторые проверки параметров и выводит полезные сообщения в выходные данные отладчика.
  - question: "Каков правильный способ проверки кодов возврата? \n"
    answer: >
      Используйте макросы "успешно" и "сбой". Методы DirectX могут возвращать несколько кодов успешного завершения и ошибок, поэтому просту:


      ``` syntax

      == D3D_OK

      ```


      или аналогичный тест не всегда будет достаточным.
  - question: "Разделы справки отключить клавиши ALT + TAB и другие переключения задач? \n"
    answer: >
      Не так. Игры должны иметь возможность корректного управления задачами, так как многие из них приводят к возникновению этой проблемы: ALT + TAB, подключения к удаленному рабочему столу, быстрое переключение пользователей, права на использование родительского контроля и многие другие события.


      В то же время два стандартных источника случайного переключения задач в играх с схемами элементов управления, ориентированными на клавиатуры, находят нажатием клавиши Windows и активируйте залипание специальных возможностей с помощью клавиши SHIFT. Чтобы устранить эти случаи путем отключения функциональности, см. методы, описанные в разделе [Отключение сочетаний клавиш в играх](/windows/desktop/DxTechArts/disabling-shortcut-keys-in-games).
  - question: "Есть ли рекомендуемая книга, объясняющая COM? \n"
    answer: >
      *В COM-* приложении Дэйл rogerson's, опубликованное Microsoft Press, является отличным ВВЕДЕНИЕМ в com. Для более подробного взгляда на модели COM также настоятельно рекомендуется использовать для книги *Ключевые com* , опубликованные в долгосрочной перспективе.
  - question: "Что такое \"управляемый код\"? \n"
    answer: >
      Управляемый код — это код, выполнение которого осуществляется с помощью платформа .NET Framework среды CLR. Он относится к контракту взаимодействия, выполняемого в собственном коде, и в среде выполнения. Этот контракт указывает, что в любой точке выполнения среда выполнения может прерывать выполнение ЦП и получать сведения, относящиеся к текущему адресу инструкции ЦП. Сведения, которые должны быть доступны для запросов, обычно относятся к состоянию среды выполнения, например регистру или содержимому стековой памяти.


      Перед выполнением кода IL компилируется в машинный исполняемый код. И, поскольку эта компиляция происходит управляемой средой выполнения (или, что более верно, компилятором с поддержкой среды выполнения, который знает, как ориентироваться на управляемую среду выполнения), среда управляемого выполнения может гарантировать то, что будет делать код. Он может вставлять ловушки и соответствующие обработчики сборки мусора, обработку исключений, безопасность типов, границы массивов и проверку индексов и т. д. Например, такой компилятор обеспечивает размещение кадров стека и всего лишь прямо так, чтобы сборщик мусора мог работать в фоновом режиме в отдельном потоке, постоянно проходея активного стека вызовов, находя все корни, прослеживания все активные объекты. Кроме того, поскольку IL имеет понятие о безопасности типа, подсистема выполнения обеспечит гарантию безопасности, исключая целый класс программных ошибок, которые часто приводят к бреши в системе безопасности.


      В отличие от неуправляемого мира: неуправляемые исполняемые файлы — это, по сути, двоичный образ, код x86, загруженный в память. В счетчик программы помещается, и это последнее известное ОС. Существуют такие средства защиты, как управление памятью и ввод-вывод на порт и т. д., но система не знает, что делает приложение. Таким образом, он не может гарантировать, что происходит при запуске приложения.
  - question: "Какие книги посвящены общему программированию Windows? \n"
    answer: >
      Многое. Однако настоятельно рекомендуется использовать следующие два.


      -   Программирование окон с помощью Чарльз Петцольд (Microsoft Press)

      -   Программирование приложений для Windows с помощью Джеффри Рихтер (Microsoft Press)
  - question: "Разделы справки отлаживать с помощью файлов символов Windows? \n"
    answer: >
      Корпорация Майкрософт отменяет публикацию неограниченных символов для всех системных библиотек DLL (а также нескольких других). Чтобы получить доступ к ним, добавьте следующий адрес в путь к символам в параметрах проекта в Visual Studio:


      ``` syntax

      srv*https://msdl.microsoft.com/download/symbols

      ```


      для локального кэширования символов используйте следующий синтаксис:


      ``` syntax

      srv*c:\cache*https://msdl.microsoft.com/download/symbols

      ```


      Где c: \\ Cache — локальный каталог для кэширования файлов символов.


      ## <a name="direct3d-questions"></a>Вопросы по Direct3D


      ### <a name="general-direct3d-questions"></a>Общие вопросы по Direct3D
  - question: "Где можно найти сведения о приемах трехмерной графики? \n"
    answer: >
      Стандартной книгой по теме является компьютерная графика: принципы и практика, Фоли, Van Dam et. Это ценный ресурс для всех пользователей, желающих разобраться в математических принципах геометрических, растровых и аппаратных методов освещения. Часто задаваемые вопросы о группе comp. Graphics. алгоритмов также содержат полезные материалы.
  - question: "Функции эмуляции Direct3D не предоставляются оборудованием? \n"
    answer: >
      Это зависит от нескольких условий. В Direct3D имеется полнофункциональный конвейер обработки вершин (включая поддержку пользовательских шейдеров вершин). Однако для операций на уровне точек эмуляция не предоставляется; приложения должны проверять соответствующие биты и использовать API Валидатедевице для определения поддержки.
  - question: "Входит ли программное средство прорисовки в Direct3D? \n"
    answer: >
      Не для приложений производительности. Для проверки драйверов предоставляется справочный средство программной прорисовки, но реализация рассчитана на точность, а не на производительность. Direct3D поддерживает модули программной прорисовки подключаемых модулей.
  - question: "Как можно выполнять цветовую раскладку с помощью графики DirectX? \n"
    answer: >
      Ключ цвета не поддерживается напрямую, вместо этого необходимо использовать альфа-смешение для эмуляции цветовой декраски. Для упрощения этой процедуры можно использовать функцию D3DXCreateTextureFromFileEx (). Эта функция принимает параметр цвета ключа и заменит все пиксели из исходного изображения, содержащего заданный цвет, прозрачными черными пикселями в созданной текстуре.
  - question: "Использует ли код геометрии Direct3D 3DNow! и/или Pentium III SIMD-инструкции? \n"
    answer: >
      Да. В конвейере обработки геометрии Direct3D есть несколько различных путей кода в зависимости от типа процессора и будут использоваться специальные операции с плавающей запятой, предоставляемые 3DNow! или Pentium III SIMD, где доступны эти инструкции. Это включает обработку пользовательских шейдеров вершин.
  - question: "Разделы справки предотвратить запись прозрачных пикселей в z-буфер? \n"
    answer: >
      Можно отфильтровать пикселы с помощью альфа-значения выше или ниже заданного порогового значения. Это поведение управляется с помощью рендерстатес АЛФАТЕСТЕНАБЛЕ, АЛФАРЕФ и АЛФАФУНК.
  - question: "Что такое буфер трафарета? \n"
    answer: >
      Буфер набора элементов — это дополнительный буфер данных на пиксель, подобно z-буферу. Фактически он находится в некоторых битах z-буфера. Формат общего трафарета/z-буфера — 15-разрядный z и 1-разрядный набор элементов, а также 24-разрядный z и 8-разрядный набор элементов. Можно выполнять простые арифметические операции над содержимым буфера шаблона на пиксельном уровне при отрисовке многоугольников. Например, буфер шаблона можно увеличить или уменьшить, или пиксель можно отклонить, если значение шаблона не проходит простой тест сравнения. Это полезно для эффектов, которые охватывают область буфера кадров, а затем выполняя визуализацию только отмеченного (или непомеченного) региона. Хорошим примером являются объемные такие эффекты, как теневые тома.
  - question: "Разделы справки использовать буфер шаблона для отображения теневых томов? \n"
    answer: >
      Ключом к этому и другим эффектам буфера набора элементов объемные является взаимодействие между буфером трафарета и z-буфером. Сцена с теневым томом отображается в три этапа. Во-первых, сцена без тени визуализируется обычным образом с помощью z-буфера. Затем тень помечается в буфере шаблона следующим образом. Лицевые стороны теневого тома рисуются с помощью невидимых многоугольников с включенным z-тестированием, но при этом отключается z-запись, а размер буфера шаблона увеличивается на каждом пикселе, передавая z-тест. Задние грани теневого тома отображаются аналогичным образом, но вместо этого уменьшается значение набора элементов.


      Теперь рассмотрим один пиксель. Если камера не находится в теневом томе, то для соответствующей точки сцены существует четыре варианта. Если луч от камеры к точке не пересекается с теневым томом, то теневые многоугольники не будут отображаться там, а буфер шаблона остается нулевым. В противном случае, если точка находится перед теневым томом, теневые многоугольники будут относиться к z-буферизации, а набор элементов снова останется неизменным. Если точки находятся за теневым томом, то будет отображено то же количество внешних лицевых сторон, что и для задних граней, а набор элементов будет равен нулю, что увеличится столько раз, сколько было уменьшено.


      Последняя возможность заключается в том, что точка находится внутри теневого тома. В этом случае на обратной стороне теневого тома будет использоваться z-буферизация, но не лицевая сторона, поэтому буфер шаблона будет иметь ненулевое значение. Результат заключается в том, что части буфера фрейма, появляющиеся в теневой копии, имеют ненулевое значение трафарета. Наконец, для фактической прорисовки тени вся сцена накладывается на многоугольник с альфа-смешением, который задается только на пикселах с ненулевым значением трафарета. Пример этой методики можно увидеть в примере "теневой том", который поставляется с пакетом SDK DirectX.
  - question: "Что такое правила выравнивания шаг текселя? Разделы справки получить сопоставление \"один к одному\"? \n"
    answer: >
      Эти сведения полностью описаны в документации по Direct3D 9. Однако для правильной согласованности с пикселей текстуры необходимо заменять координаты экрана на-0,5 пикселей. Большинство карт теперь правильно соответствуют правилам выравнивания шаг текселя, однако некоторые старые карты или драйверы не поддерживаются. Чтобы справиться с этими случаями, лучше обратиться к поставщику оборудования и запросить обновленные драйверы или предлагаемое решение. Обратите внимание, что в Direct3D 10 это правило больше не хранится.
  - question: "Для чего предназначен \\_ флаг D3DCREATE пуредевице? \n"
    answer: >
      Используйте флаг D3DCREATE \_ пуредевице во время создания устройства, чтобы создать чистое устройство. Чистое устройство не сохраняет текущее состояние (во время изменений состояния), что часто повышает производительность; для этого устройства также требуется аппаратная обработка вершин. Чистое устройство обычно используется при завершении разработки и отладки, и вы хотите добиться лучшей производительности.


      Недостаток чистого устройства заключается в том, что он не поддерживает все \* вызовы API Get. Это означает, что нельзя использовать чистое устройство для запроса состояния конвейера. Это усложняет отладку во время выполнения приложения. Ниже приведен список всех методов, отключенных чистым устройством.


      -   [**IDirect3DDevice9:: Жетклипплане**](/windows/desktop/api/d3d9/nf-d3d9-idirect3ddevice9-getclipplane)

      -   [**IDirect3DDevice9:: Жетклипстатус**](/windows/desktop/api/d3d9/nf-d3d9-idirect3ddevice9-getclipstatus)

      -   [**IDirect3DDevice9:: light**](/windows/desktop/api/d3d9/nf-d3d9-idirect3ddevice9-getlight)

      -   [**IDirect3DDevice9:: осветлить**](/windows/desktop/api/d3d9/nf-d3d9-idirect3ddevice9-getlightenable)

      -   [**IDirect3DDevice9:: о.**](/windows/desktop/api/d3d9/nf-d3d9-idirect3ddevice9-getmaterial)

      -   [**IDirect3DDevice9:: Жетпикселшадерконстантф**](/windows/desktop/api/d3d9helper/nf-d3d9helper-idirect3ddevice9-getpixelshaderconstantf)

      -   [**IDirect3DDevice9:: Жетпикселшадерконстанти**](/windows/desktop/api/d3d9helper/nf-d3d9helper-idirect3ddevice9-getpixelshaderconstanti)

      -   [**IDirect3DDevice9:: Жетпикселшадерконстантб**](/windows/desktop/api/d3d9helper/nf-d3d9helper-idirect3ddevice9-getpixelshaderconstantb)

      -   [**IDirect3DDevice9:: Жетрендерстате**](/windows/desktop/api/d3d9/nf-d3d9-idirect3ddevice9-getrenderstate)

      -   [**IDirect3DDevice9:: Жетсамплерстате**](/windows/desktop/api/d3d9/nf-d3d9-idirect3ddevice9-getsamplerstate)

      -   [**IDirect3DDevice9:: Жеттекстурестажестате**](/windows/desktop/api/d3d9/nf-d3d9-idirect3ddevice9-gettexturestagestate)

      -   [**IDirect3DDevice9:: Transform**](/windows/desktop/api/d3d9/nf-d3d9-idirect3ddevice9-gettransform)

      -   [**IDirect3DDevice9:: Жетвертексшадерконстантф**](/windows/desktop/api/d3d9/nf-d3d9-idirect3ddevice9-getvertexshaderconstantf)

      -   [**IDirect3DDevice9:: Жетвертексшадерконстанти**](/windows/desktop/api/d3d9/nf-d3d9-idirect3ddevice9-getvertexshaderconstanti)

      -   [**IDirect3DDevice9:: Жетвертексшадерконстантб**](/windows/desktop/api/d3d9/nf-d3d9-idirect3ddevice9-getvertexshaderconstantb)


      Вторым недостатком чистого устройства является то, что он не фильтрует изменения в избыточном состоянии. При использовании чистого устройства приложение должно уменьшить количество изменений состояния в цикле визуализации до минимума; Это может включать изменения состояния фильтрации, чтобы гарантировать, что состояния не будут установлены несколько раз. Это компромиссно зависит от приложения; При использовании более 1000 вызовов set на кадр следует рассмотреть возможность использования фильтрации избыточности, которая выполняется автоматически нечистым устройством.


      Как и в случае всех проблем с производительностью, единственный способ определить, будет ли приложение работать лучше с чистого устройства, — сравнить производительность приложения с чистым и нечистым устройством. Чистое устройство может ускорить работу приложения, уменьшая нагрузку на ЦП API. Но будьте внимательны! В некоторых сценариях чистое устройство будет замедлять работу приложения (из-за дополнительных операций ЦП, вызванных изменением избыточного состояния). Если вы не знаете, какой тип устройства лучше подходит для вашего приложения, и вы не фильтруете избыточные изменения в приложении, используйте нечистое устройство.
  - question: "Разделы справки перечислить устройства отображения в системе с несколькими мониторами? \n"
    answer: >
      Перечисление можно выполнить с помощью простой итерации приложения с помощью методов интерфейса IDirect3D9. Вызовите Жетадаптеркаунт, чтобы определить количество адаптеров дисплея в системе. Вызовите Жетадаптермонитор, чтобы определить, к какому физическому монитору подключен адаптер (этот метод возвращает ХМОНИТОР, который затем можно использовать в Жетмониторинфо API Win32 для определения сведений о физическом мониторе). Определение характеристик конкретного видеоадаптера или создание устройства Direct3D на этом адаптере сводится к передаче соответствующего номера адаптера вместо D3DADAPTER \_ по умолчанию при вызове жетдевицекапс, креатедевице или других методов.
  - question: "Что случилось с исправленной функцией Бумпмаппинг в D3D9? \n"
    answer: "Начиная с Direct3D 9 мы проверку на картах, которые поддерживали только > 2 одновременные текстуры. При использовании определенной операции альфа-модуляции для некоторых старых карт доступно 3 этапа текстуры. Наиболее распространенный способ использования, в котором люди используют три этапа, — Приподнятие бумпмаппинг, и вы все равно можете сделать это с помощью D3D9.\n\nПоле Height должно храниться в альфа-канале и использоваться для модуляции вклада в свет, то есть:\n\n``` syntax\n// Stage 0 is the base texture, with the height map in the alpha channel\nm_pd3dDevice->SetTexture(0, m_pEmbossTexture );\nm_pd3dDevice->SetTextureStageState(0, D3DTSS_TEXCOORDINDEX, 0 );\nm_pd3dDevice->SetTextureStageState(0, D3DTSS_COLOROP,   D3DTOP_MODULATE );\nm_pd3dDevice->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE );\nm_pd3dDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE );\nm_pd3dDevice->SetTextureStageState(0, D3DTSS_ALPHAOP,   D3DTOP_SELECTARG1 );\nm_pd3dDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE );\nif( m_bShowEmbossMethod )\n{\n // Stage 1 passes through the RGB channels (SELECTARG2 = CURRENT), and \n // does a signed add with the inverted alpha channel. \n // The texture coords associated with Stage 1 are the shifted ones, so \n // the result is:\n //    (height - shifted_height) * tex.RGB * diffuse.RGB\n   m_pd3dDevice->SetTexture( 1, m_pEmbossTexture );\n   m_pd3dDevice->SetTextureStageState( 1, D3DTSS_TEXCOORDINDEX, 1 );\n   m_pd3dDevice->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_SELECTARG2 );\n   m_pd3dDevice->SetTextureStageState( 1, D3DTSS_COLORARG1, D3DTA_TEXTURE );\n   m_pd3dDevice->SetTextureStageState( 1, D3DTSS_COLORARG2, D3DTA_CURRENT );\n   m_pd3dDevice->SetTextureStageState( 1, D3DTSS_ALPHAOP, D3DTOP_ADDSIGNED );\n   m_pd3dDevice->SetTextureStageState( 1, D3DTSS_ALPHAARG1, D3DTA_TEXTURE|D3DTA_COMPLEMENT );\n   m_pd3dDevice->SetTextureStageState( 1, D3DTSS_ALPHAARG2, D3DTA_CURRENT );\n\n   // Set up the alpha blender to multiply the alpha channel \n   // (monochrome emboss) with the src color (lighted texture)\n   m_pd3dDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );\n   m_pd3dDevice->SetRenderState( D3DRS_SRCBLEND,  D3DBLEND_SRCALPHA );\n   m_pd3dDevice->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ZERO );\n}\n```\n\nЭтот пример вместе с другими более старыми примерами больше не поставляются в текущем выпуске пакета SDK и не будет поставляться в будущих выпусках пакета SDK.\n\n### <a name=\"geometry-vertex-processing\"></a>Обработка геометрии (вершина)\n"
  - question: "Потоки вершин путают мне, как они работают? \n"
    answer: >
      Direct3D собирает каждую вершину, которая передается в обрабатывающую часть конвейера, из одного или нескольких потоков вершин. Наличие только одного потока вершин соответствует старой модели, предшествующей DirectX 8, в которой вершины берутся из одного источника. С помощью DirectX 8 различные компоненты вершины могут поступать из разных источников. Например, один буфер вершин может содержать позиции и нормали, в то время как второй сохраненный цвет и координаты текстуры.
  - question: "Что такое шейдер вершин? \n"
    answer: >
      Шейдер вершин — это процедура обработки одной вершины. Он определяется с помощью простого языка, аналогичного сборке, который собирается библиотекой служебной программы D3DX в поток маркеров, принимаемый Direct3D. Шейдер вершин принимает в качестве входных данных одну вершину и набор постоянных значений; Он выводит расположение вершины (в пространстве клипов) и, при необходимости, набор цветов и координат текстуры, которые используются при растрировании. Обратите внимание, что при наличии пользовательского шейдера вершин компоненты вершины больше не имеют никакой семантики, применяемой в Direct3D, а вершины — это просто произвольные данные, интерпретируемые создаваемым шейдером вершин.
  - question: "Выполняет ли шейдер вершин деление перспективы или обрезает? \n"
    answer: >
      Нет. Шейдер вершин выводит однородную координату в пространстве обрезки для преобразованной координаты вершины. Подразделение перспективы и обрезка выполняются автоматически после шейдера.
  - question: "Можно ли создать геометрию с помощью шейдера вершин? \n"
    answer: >
      Шейдер вершин не может создавать или удалять вершины; Он работает с одной вершиной за раз, принимая одну необработанную вершину в качестве входных данных и выводите одну обработанную вершину. Таким образом, его можно использовать для работы с существующей геометрией (применением или выполнением операций с обложками), но на самом деле не может создать новую геометрию на уровне SE.
  - question: "Можно ли применить пользовательский шейдер вершин к результатам конвейера геометрии с фиксированной функцией (или наоборот)? \n"
    answer: >
      Нет. Необходимо выбрать один или другой. Если вы используете пользовательский шейдер вершин, вы несете ответственность за выполнение всего преобразования вершин.
  - question: "Можно ли использовать пользовательский шейдер вершин, если его оборудование не поддерживает? \n"
    answer: >
      Да. Модуль обработки вершин программного обеспечения Direct3D полностью поддерживает пользовательские шейдеры вершин с удивительно высоким уровнем производительности.
  - question: "Разделы справки определить, поддерживает ли оборудование пользовательский шейдер вершин? \n"
    answer: >
      Устройства, поддерживающие поддержку шейдеров вершин в оборудовании, необходимы для заполнения поля D3DCAPS9:: Вертексшадерверсион, указывающего на уровень версии шейдера вершин, который они поддерживают. Все устройства, поддерживающие определенный уровень шейдера вершин, должны поддерживать все допустимые построители текстур вершин, соответствующие спецификации этого уровня или ниже.
  - question: "Сколько регистров констант доступно для шейдеров вершин? \n"
    answer: >
      Устройства, поддерживающие шейдер вершин VS 1,0, должны поддерживать не менее 96 постоянных регистров. Устройства могут поддерживать больше этого минимального числа и могут сообщить об этом через поле D3DCAPS9:: Максвертексшадерконст.
  - question: "Можно ли совместно использовать данные о положении между вершинами с разными координатами текстуры? \n"
    answer: >
      Обычным примером этой ситуации является куб, в котором необходимо использовать другую текстуру для каждой грани. Увы, ответ — «нет», сейчас невозможно индексировать компоненты вершин по отдельности. Даже с несколькими потоками вершин индексируются все потоки.
  - question: "При отправке индексированного списка примитивов Direct3D обрабатывает все вершины в буфере или только индексируемые? \n"
    answer: >
      При использовании конвейера по геометрии программного обеспечения Direct3D сначала преобразует все вершины в отправленном диапазоне, а не преобразует их по запросу, когда они индексируются. Для плотных упакованных данных (то есть, где используются большинство вершин) это более эффективно, особенно если доступны инструкции SIMD. Если данные находятся в разреженном виде (т. е. многие вершины не используются), то, возможно, потребуется переупорядочить данные, чтобы избежать слишком большого количества избыточных преобразований. При использовании аппаратного ускорения геометрии вершины обычно преобразуются по запросу по мере необходимости.
  - question: "Что такое буфер индексов? \n"
    answer: >
      Буфер индексов точно аналогичен буферу вершин, но он содержит индексы для использования в вызовах Дравиндекседпримитиве. Настоятельно рекомендуется использовать буферы индексов вместо необработанной памяти, выделенной приложением по возможности, по тем же причинам, что и буферы вершин.
  - question: "Обратите внимание, что 32-разрядные индексы поддерживают тип; можно ли использовать их на всех устройствах? \n"
    answer: >
      Нет. Чтобы определить максимальное значение индекса, поддерживаемое устройством, необходимо проверить поле D3DCAPS9:: Максвертексиндекс. Это значение должно быть больше 2 в 16-й час (0xFFFF), чтобы буферы индексов типа D3DFMT \_ INDEX32 поддерживались. Кроме того, обратите внимание, что некоторые устройства могут поддерживать 32-разрядные индексы, но поддерживают максимальное значение индекса, меньшее 2, в 32-го Power-1 (0xFFFFFFFF). в этом случае приложение должно учитывать лимит, сообщаемый устройством.
  - question: "Поддерживает ли обработка вершин (S/W) 64 бит? \n"
    answer: >
      Для x64 существует оптимизированный конвейер s/w, но он не существует для IA64.


      ### <a name="performance-tuning"></a>Настройка производительности
  - question: "Как можно повысить производительность приложения Direct3D? \n"
    answer: >
      Ниже приведены основные аспекты, которые следует рассмотреть при оптимизации производительности.
  - question: "Размер пакета \n"
    answer: >
      Direct3D оптимизирован для больших пакетов примитивов. Чем больше многоугольников можно отправить в одном вызове, тем лучше. Хорошим правилом для параметра Thumb является среднее 1000 вершин на вызов примитива. Ниже этот уровень, вероятно, не является оптимальной производительностью, чем выше, и вы получаете снижение количества возвратов и потенциальных конфликтов с соображениями параллелизма (см. ниже).
  - question: "Изменения состояния \n"
    answer: "Изменение состояния рендеринга может быть дорогостоящей операцией, особенно при изменении текстуры. По этой причине важно максимально увеличить количество изменений состояния в кадре. Кроме того, постарайтесь не изменять буфер вершин или индекс.\n\n> [!Note]  \n> Начиная с DirectX 8 стоимость изменения буфера вершин больше не так высока, как и в предыдущих версиях, но рекомендуется избегать изменений в буфере вершин, если это возможно.\n\n \n"
  - question: >
      Параллелизм
    answer: >
      Если вы можете организовать параллельную отрисовку с другой обработкой, вы получите все преимущества производительности системы. Эта цель может конфликтовать с целью сокращения рендерстате изменений. Необходимо установить баланс между пакетной обработкой, чтобы сократить изменения состояния и принудительно отправить данные в драйвер, чтобы помочь достигнуть параллелизма. Использование нескольких буферов вершин с циклическим перебором может помочь при одновременном использовании.
  - question: "Передачи текстур \n"
    answer: >
      Передача текстур на устройство потребляет пропускную способность и вызывает конкуренцию с пропускной способностью с данными вершин. Поэтому важно не перегружать память текстуры, что приведет к принудительной нагрузке схемы кэширования для передачи чрезмерного количества текстур каждого кадра.
  - question: "Буферы вершин и индексов \n"
    answer: >
      Всегда следует использовать буферы вершин и индексов, а не обычные блоки выделенной памяти приложения. Как минимум семантика блокировки буферов вершин и индексов может не допустить избыточной операции копирования. С некоторыми драйверами можно разместить буфер вершин или индекс в более оптимальном объеме памяти (например, в видеопамяти или AGP) для доступа к оборудованию.
  - question: "Блоки макросов состояния \n"
    answer: "Они появились в DirectX 7,0. Они предоставляют механизм для записи ряда изменений состояния (в том числе изменений освещения, материала и матрицы) в макрос, который затем можно воспроизвести с помощью одного вызова. Это принесет два преимущества:\n\n-   Вы уменьшаете затраты на вызов, вызвав один вызов вместо множества.\n-   Драйвер с поддержкой драйвера может предварительно анализировать и предварительно компилировать изменения состояния, что значительно ускоряет их отправку на графическое оборудование.\n\nИзменения состояния по-прежнему могут быть дорогостоящими, но использование макросов состояния помогает сократить по крайней мере некоторые затраты. Используйте только одно устройство Direct3D. Если необходимо выполнить отрисовку в несколько целевых объектов, используйте Сетрендертаржет. Если вы создаете оконное приложение с несколькими трехмерными окнами, используйте API Креатеаддитионалсвапчаин. Среда выполнения оптимизирована для одного устройства, и при использовании нескольких устройств возникает существенное снижение скорости.\n\n \n"
  - question: "Какие типы-примитивы (полосы, вентиляторы, списки и т. д.) следует использовать? \n"
    answer: >
      Многие сетки, обнаруженные в реальных вершинах данных, совместно используются несколькими многоугольниками. Чтобы повысить производительность, желательно уменьшить дублирование в вершинах, преобразованных и передаваемых через шину на устройство отрисовки. Очевидно, что использование простых списков треугольников не дает общего доступа к вершинам, делая его наименее оптимальным методом. Затем можно выбрать между полосами и вентиляторами, которые подразумевают определенное отношение соединения между многоугольниками и использование индексированных списков. Если данные естественным образом попадают в полосы и вентиляторы, это наиболее подходящий вариант, так как они уменьшают объем данных, отправляемых в драйвер. Однако разложение сеток на полосы и вентиляторы часто приводит к большому количеству отдельных частей, что подразумевает наличие большого числа вызовов Дравпримитиве. По этой причине наиболее эффективным методом обычно является использование одного вызова Дравиндекседпримитиве со списком треугольников. Дополнительное преимущество использования индексированного списка заключается в том, что преимущество может быть получено даже в том случае, если последовательные треугольники совместно используют только одну вершину. В сводке, если данные естественным образом попадают в большие полосы или вентиляторы, используйте полосы или вентиляторы. в противном случае используйте индексированные списки.
  - question: "Как определить общую память текстуры, имеющую карту, за исключением памяти AGP? \n"
    answer: >
      [**IDirect3DDevice9:: жетаваилаблетекстуремем**](/windows/desktop/api/d3d9/nf-d3d9-idirect3ddevice9-getavailabletexturemem) возвращает общий объем доступной памяти, включая AGP. Выделение ресурсов на основе предположения о том, какой объем видеопамяти не является великолепной идеей. Например, что делать, если карта работает с архитектурой единой памяти или может сжимать текстуры? Может быть больше свободного места, чем вы могли подумать. Следует создать ресурсы и проверить наличие ошибок "недостаточно памяти", а затем выполнить масштабирование на текстурах. Например, можно удалить верхние уровни MIP текстур.
  - question: "Какова хорошая схема использования буферов вершин при создании динамических данных? \n"
    answer: >
      1.  Создайте буфер вершин, используя \_ Флаги D3DUSAGE Dynamic и D3DUSAGE \_ WRITEONLY, а также \_ флаг D3DPOOL пула по умолчанию. (Также укажите D3DUSAGE \_ СОФТВАРЕПРОЦЕССИНГ, если используется программная обработка вершин.)

      2.  I = 0.

      3.  Задайте состояние (текстуры, рендерстатес и т. д.).

      4.  Проверьте, есть ли в буфере место, например, "I + M <= N?" (Где M — число новых вершин).

      5.  Если да, то заблокируйте VB с помощью D3DLOCK \_ нуверврите. Это означает, что Direct3D и драйвер, в который будут добавляться вершины, не будут изменять ранее Пакетированные. Таким образом, если выполняется операция DMA, она не прерывается. Если нет, goto 11.

      6.  Заполните вершины M в I.

      7.  Блокирован.

      8.  Вызов метода рисования \[ индексированного \] примитива. Для неиндексированных примитивов в качестве параметра Стартвертекс используется I. Для индексированных примитивов убедитесь, что индексы указывают на правильную часть буфера вершин (для достижения этого может быть проще использовать параметр Басевертексиндекс в вызове Сетиндицес).

      9.  I + = M.

      10. GOTO 3.

      11. Итак, у нас нет свободного пространства, поэтому начнем с нового VB. Мы не будем использовать тот же самый, так как возможно, выполняется операция DMA. Мы переносимся к нему на Direct3D и драйвер, заключив тот же VB с \_ флагом D3DLOCK Discard. Это означает: "вы можете дать мне новый указатель, так как я делаю старый, и не волнует о старом содержимом".

      12. I = 0.

      13. GOTO 4 (или 6).
  - question: "Зачем нужно указывать дополнительные сведения в структуре D3DVERTEXELEMENT9? \n"
    answer: >
      Начиная с Direct3D 9, объявление потока вершин больше не является просто массивом типа DWORD, а теперь является массивом структур D3DVERTEXELEMENT9. Среда выполнения использует дополнительные сведения о семантике и использовании для привязки содержимого потоков вершин к входным регистрам и переменным шейдеров вершин. Для Direct3D 9 объявления вершин отделены от шейдеров вершин, что упрощает использование шейдеров с геометрией различных форматов, так как среда выполнения привязывает только те данные, которые необходимы шейдеру.


      Новые объявления вершин можно использовать с фиксированным конвейером функций или с шейдерами. Для конвейера фиксированной функции нет необходимости вызывать Сетвертексшадер. Если же вы хотите переключиться на конвейер фиксированной функции и ранее использовала шейдер вершин, вызовите Сетвертексшадер (NULL). Когда это будет сделано, вам все равно потребуется вызвать Сетфвф для объявления кода ФВФ.


      При использовании шейдеров вершин вызовите Сетвертексшадер с объектом шейдера вершин. Кроме того, вызовите Сетфвф, чтобы настроить объявление вершины. При этом используются сведения, неявные в ФВФ. Сетвертексдекларатион можно вызвать вместо Сетфвф, так как он поддерживает объявления вершин, которые не могут быть выражены с помощью ФВФ.
- name: Библиотека служебной программы D3DX
  questions:
  - question: "Какие форматы файлов поддерживаются функциями загрузчика файлов изображений D3DX? \n"
    answer: >
      Функции загрузчика файлов образа D3DX поддерживают файлы BMP, TGA, JPG, DIB, PPM и DDS.
  - question: "Функции отрисовки текста в D3DX не работают, что я делаю неправильным? \n"
    answer: >
      Распространенной ошибкой при использовании функций ID3DXFont::D Равтекст является указание нулевого альфа-компонента для параметра Color. в результате получается полностью прозрачный (невидимый) текст. Для полностью непрозрачного текста убедитесь, что альфа-компонент параметра Color полностью насыщен (255).
  - question: "Как сохранить содержимое поверхности или текстуры в файл? \n"
    answer: >
      Пакет SDK DirectX 8,1 добавил две функции в библиотеку D3DX специально для этой цели: D3DXSaveSurfaceToFile () и D3DXSaveTextureToFile (). Эти функции поддерживают сохранение изображения в файл в формате BMP или DDS. В предыдущих версиях необходимо заблокировать поверхность и прочитать данные образа, а затем записать их в файл точечного рисунка. Сведения о записи функции для хранения точечных рисунков см. в разделе [Сохранение изображения](/windows/desktop/gdi/storing-an-image).


      Кроме того, GDI+ можно использовать для сохранения изображения в самых разных форматах, хотя для этого требуются дополнительные файлы поддержки, распространяемые вместе с приложением.
  - question: "Как можно использовать язык шейдеров высокого уровня (HLSL) в моей игре? \n"
    answer: >
      Существует три способа включения языка шейдеров высокого уровня Microsoft (HLSL) в модуль игры:


      -   Скомпилируйте источник шейдера в сборку заливки вершин или пикселей (с помощью служебной программы командной строки fxc.exe) и используйте D3DXAssembleShader () во время выполнения. Таким образом, даже игра DirectX 8 может даже воспользоваться преимуществами HLSL.

      -   Используйте D3DXCompileShader () для компиляции источника шейдера в поток маркеров и форму таблицы констант. Во время выполнения Загрузите поток маркера и таблицу констант и вызовите Креатевертексшадер () или Креатепикселшадер () на устройстве, чтобы создать шейдеры.

      -   Самый простой способ начать работу — воспользоваться преимуществами системы D3DX Effects, вызвав D3DXCreateEffectFromFile () или D3DXCreateEffectFromResource () с файлом действия.
  - question: "Каково назначение нового флага компилятора шейдеров? \n"
    answer: >
      Начиная с декабря 2006 DirectX SDK, новый компилятор HLSL, разработанный для Direct3D 10, включен для целевых объектов Direct3D 9. Новый компилятор не поддерживает \_ \_ целевые объекты PS 1 x и теперь является компилятором по умолчанию для всех шейдеров Direct3D HLSL. Флаг для обратной совместимости можно использовать для принудительной \_ \_ компиляции целевых объектов PS 1 x в качестве \_ \_ целевых объектов PS 2 0.


      Приложения, которые хотят использовать устаревший компилятор, могут продолжать это сделать, указав флаг во время выполнения (см. раздел [**флаги компилятора**](/windows/desktop/direct3d9/d3dxshader-flags)) или указав параметр при использовании fxc.
  - question: "Что такое правильный способ получения шейдеров? \n"
    answer: >
      Используйте D3DXCreateEffect, чтобы создать ID3DXEffect, а затем используйте Жетпассдеск для получения D3DXPASS \_ DESC. Эта структура содержит указатели на шейдеры вершин и пикселей.


      Не используйте ID3DXEffectCompiler:: Жетпассдеск. Дескрипторы шейдеров вершин и точек, возвращенные этим методом, имеют значение NULL.
  - question: "Что представляет собой встроенный шум HLSL ()? \n"
    answer: >
      Встроенная функция Noise создает шум Perl, как определено в Алексей Perl. В настоящее время функцию HLSL можно использовать только для заливки текстур в шейдерах текстур, так как текущая функция h/w не поддерживает собственный метод. Шейдер текстуры используются в сочетании с \* функциями текстур D3DXFill (), которые являются полезными вспомогательными функциями для создания определенных в процессе загрузки текстур, определяемых процедурой.
  - question: "Разделы справки определить, следует ли использовать модель шейдера пикселей 2,0 или 2. a? \n"
    answer: >
      Вы можете использовать функции D3DXGetPixelShaderProfile () и D3DXGetPixelShaderProfile (), которые возвращают строку, определяющую, какой профиль HLSL лучше всего подходит для запуска устройства.
  - question: "Разделы справки получить доступ к параметрам в шейдере предкомпилированных эффектов? \n"
    answer: >
      Через интерфейс ID3DXConstantTable, который используется для доступа к таблице констант. Эта таблица содержит переменные, используемые в высокоуровневой шейдере и эффектах языка.
  - question: "Есть ли способ добавить данные пользователя в воздействие или другой ресурс? \n"
    answer: "Да, чтобы задать закрытые данные, вы вызываете Сетприватедата (Преал — это объект текстуры D3D, Пспуф — объект текстуры с оболочкой).\n\n``` syntax\nhr = pReal->SetPrivateData(IID_Spoof, &pSpoof, \n            sizeof(IDirect3DResource9*), 0)));\n```\n\nПоиск указателя в оболочке:\n\n``` syntax\n    IDirect3DResource9* pSpoof;\n    DWORD dwSize = sizeof(pSpoof);\n    hr = pReal->GetPrivateData(IID_Spoof, (void*) &pSpoof, &dwSize);\n```\n"
  - question: "Почему отрисовка объекта ID3DXMesh значительно замедляется после определения подмножества? \n"
    answer: >
      Вероятно, вы не оптимизируем сетку после определения атрибутов лица. Если указать атрибуты и затем вызвать ID3DXMesh::D Равсубсет (), этот метод должен выполнить поиск по сетке для всех лиц, содержащих запрошенные атрибуты. Кроме того, отображаемые лица, скорее всего, имеют шаблон произвольного доступа, поэтому не используют кэш вершин. Определив атрибуты лица для поднаборов, вызовите методы ID3DXMesh:: optimize или ID3DXMesh:: Оптимизеинплаце и укажите метод оптимизации D3DXMESHOPT \_ аттрсорт или более надежных. Обратите внимание, что для оптимальной производительности следует оптимизировать с помощью \_ флага D3DXMESHOPT вертекскаче, который также будет переупорядочивать вершины для оптимального использования кэша вершин. Массив соседей, созданный для сетки D3DX, имеет три записи для каждого лица, но некоторые стороны могут не иметь смежных граней на всех трех краях. Как это кодируется? Записи, в которых нет смежных сторон, кодируются как 0xFFFFFFFF.
  - question: "Я слышал многое о предварительно вычисленном Радианце переносе (PRT), где можно узнать больше? \n"
    answer: >
      PRT — это новая функция D3DX, добавленная в обновление пакета SDK для летнего 2003. Он обеспечивает визуализацию сложных сценариев освещения, таких как Global-ллуминатион, мягкое затемнение и подсветка в режиме реального времени. Пакет SDK содержит документацию и примеры интеграции технологии в игру. Примеры демонстрационных образцов PRT и Локалдеформаблепрт демонстрируют использование симулятора для каждой вершины и сценариев освещения в пикселах соответственно. Дополнительные сведения об этом и других статьях можно найти на веб-странице Питер Пайк братья.
  - question: "Как выполнить рендеринг на текстуру и использовать сглаживание? \n"
    answer: >
      Создайте целевой объект рендеринга с помощью Direct3DDevice9:: Креатерендертаржет. После подготовки сцены к этой цели рендеринга Стретчрект от нее к текстуре целевого объекта прорисовки. Если вы внесете изменения в текстре (например, размытие или цветут), скопируйте его обратно в задний буфер, прежде чем приступить к представлению ().
- name: Вопросы о DirectSound
  questions:
  - question: "Почему при запуске приложения я могу получить пакет со статической статичностью? Я также вижу эту проблему с другими приложениями. \n"
    answer: >
      Возможно, вы установили отладочную среду выполнения DirectX. Отладочная версия среды выполнения заполняет буферы статическими, чтобы помочь разработчикам перехватывать ошибки с неинициализированными буферами. Невозможно гарантировать содержимое буфера DirectSound после создания; в частности, нельзя предположить, что буфер с нулевым значением.
  - question: "Почему возникают задержки между изменением параметров эффектов и слуха результатов? \n"
    answer: >
      Изменения параметров влияния не всегда выполняются немедленно в DirectX 8. Для повышения эффективности DirectSound обрабатывает звуковые данные в буфере 100 миллисекунд, начиная с курсора Play, до воспроизведения буфера. Такая предварительная обработка происходит после всех следующих вызовов:


      ``` syntax

      IDirectSoundBuffer8::SetCurrentPosition

      IDirectSoundBuffer8::SetFX

      IDirectSoundBuffer8::Stop

      IDirectSoundBuffer8::Unlock

      ```


      Начиная с версии DirectX 9, новый алгоритм обработки FX, который обрабатывает эффекты по времени, решает эту проблему и сокращает задержку. Алгоритм был добавлен в вызов IDirectSoundBuffer8::P компоновки () вместе с дополнительным потоком, обрабатывающим все действия, предшествующие курсору Write. Поэтому вы можете задать параметры в любое время, и они будут работать должным образом. Однако обратите внимание, что в воспроизводимом буфере будет небольшая задержка (обычно 100 мс) перед тем, как вы услышите изменение параметра, так как звук между курсорами воспроизведения и записи (и более немного дополнительных полей) уже обработан в это время.
  - question: "Разделы справки определить, установлен ли Дсаунд? \n"
    answer: >
      Если не нужно использовать Директсаунденумерате () для перечисления доступных устройств Дсаунд, не следует связывать приложение с дсаунд. lib и использовать его через идет CoCreateInstance (CLSID \_ DirectSound...), а затем инициализировать объект дсаунд с помощью функции Initialize (null). Если необходимо использовать Директсаунденумерате (), можно динамически загружать dsound.dll с помощью LoadLibrary ("dsound.dll"). и получить доступ к его методам с помощью GetProcAddress ("Директсаунденумератеа/W") и GetProcAddress ("Директсаундкреатеа/W") и т. д.
  - question: "Разделы справки создать многоканальный звук с помощью ВАВЕФОРМАТЕКСТЕНСИБЛЕ? \n"
    answer: >
      Если вы не можете найти ответ на свой вопрос в файлах справки DirectSound, то есть хорошая статья, в которой содержатся дополнительные сведения о звуковых данных и звуковых файлах для нескольких каналов.
  - question: "Как можно использовать диспетчер DirectSound с наборами свойств, например EAX? \n"
    answer: >
      В DirectSound 9,0 при дублировании буфера теперь можно получить интерфейс IDirectSoundBuffer8 для повторяющегося буфера, который предоставит доступ к методу AcquireResources. Это позволит связать буфер с \_ флагом дсбкапс локдефер с аппаратным ресурсом. Затем можно задать параметры EAX в этом буфере перед вызовом Play ().
  - question: "При использовании уведомлений о положении курсора возникают проблемы с ненадежным поведением. Как можно получить более точную информацию? \n"
    answer: >
      В различных версиях DirectSound присутствуют некоторые небольшие ошибки: основной стек Windows и аудио драйверы, которые делают уведомления о расположениях курсоров ненадежными. Если вы не нацелены на известную конфигурацию оборудования или программного обеспечения, на которой вы знаете, что уведомления хорошо настроены, не используйте уведомления о положении курсора. Для отслеживания позиций Жеткуррентпоситион () является более безопасной методикой.
  - question: "Я низкий от снижения производительности при использовании Жеткуррентпоситион (). Что можно сделать для повышения производительности? \n"
    answer: >
      Каждый вызов Жеткуррентпоситион () для каждого буфера вызывает системный вызов, и системные вызовы должны быть минимальными, так как они являются большим компонентом ресурсов ЦП Дсаунд. В NT (Win2K и XP) курсоры в буферах SW (и АППАРАТных буферах на некоторых устройствах) перемещаются в 10 мс приращения, поэтому вызов Жеткуррентпоситион () для каждого 10 МС является идеальным. Обращение к нему чаще, чем при каждом 5 мс, приведет к снижению производительности.
  - question: "Приложение DirectSound занимает слишком много времени ЦП или медленно выполняется. Можно ли что-нибудь сделать для оптимизации моего кода? \n"
    answer: >
      Для повышения производительности звукового кода можно сделать несколько вещей:


      -   Не вызывайте Жеткуррентпоситион слишком часто. Каждый вызов Жеткуррентпоситион () для каждого буфера вызывает системный вызов, и системные вызовы должны быть минимальными, так как они являются большим компонентом ресурсов ЦП Дсаунд. В NT (Win2K и XP) курсоры в буферах SW (и АППАРАТных буферах на некоторых устройствах) перемещаются в 10 мс приращения, поэтому вызов Жеткуррентпоситион () для каждого 10 МС является идеальным. Обращение к нему чаще, чем при каждом 5 мс, приведет к снижению производительности.

      -   Используйте отдельную, более низкую частоту кадров для звука. Настоящее время многих игр Windows может превышать 100 кадров в секунду, и в большинстве случаев не требуется обновлять трехмерные звуковые параметры с той же частотой кадров. Обработка звука каждую секунду или в третьем графическом фрейме, а также каждый 30ms или т. д. может значительно сократить количество звуковых вызовов в приложении, не снижая качества звучания.

      -   \_Для трехмерных объектов используйте DS3D. Большинство звуковых карт немедленно реагируют на изменения параметров, и в одном кадре может измениться, особенно при изменении положения или ориентации прослушивателя. Это заставляет саундкард или ЦП выполнять множество ненужных вычислений, поэтому другая быстрая и универсальная оптимизация — отложить некоторые изменения параметров и зафиксировать их в конце кадра.

          или, по крайней мере, используйте Сеталлпараметерс, а не отдельные вызовы Set3DParamX для буферов.

          Аналогичным образом следует использовать как минимум вызовы Сеталлпараментерс в трехмерных буферах, а не отдельные вызовы Set3DParamX. Просто постарайтесь по возможности максимально сокращать системные вызовы.

      -   Не делайте избыточных вызовов; Хранение и сортировка списка вызовов Play. Часто в одном кадре обновления звука есть 2 запроса на воспроизведение новых звуков. Если запросы обрабатываются по мере их поступления, можно запустить первый новый звук, а затем сразу же заменить второй запрошенный звук. Это приводит к избыточным вычислениям, ненужному вызову Play и ненужному вызову метода завершения. Лучше хранить список запросов на воспроизведение новых звуков, чтобы список можно было отсортировать, и только те из них, которые должны начать играть, всегда воспроизводятся.

          Кроме того, следует хранить локальные копии параметров объемного и EAXного объема для каждого источника звука. Если выполняется запрос на присвоение параметру определенного значения, можно проверить, отличается ли значение от последнего набора значений. Если это не так, вызов не нужно делать.

          Несмотря на то, что драйвер звуковой карты, вероятно, обнаружит этот сценарий и не выполнит (то же самое) вычисление, звуку будет необходимо связаться с аудио-драйвером (через смену звонка), и это действие уже выполняется.
  - question: "При потоковой передаче в буфер происходит сбой и он плохо выполняется. Каков лучший способ потоковой передачи буфера? \n"
    answer: >
      Потоковая передача звука в буфер включает два основных алгоритма: после-Write-Cursor (АВК) и до-Play-Cursor (бит/с). АВК сокращает задержку за счет сбоя, в то время как канал передачи данных является противоположным. Так как обычно нет интерактивных изменений в потоковой громкости, такая ситуация редко бывает проблемой для игр и аналогичных приложений, поэтому канал передачи данных является более подходящим алгоритмом. В АВК каждый раз, когда поток потоковой передачи работает, данные в цикле перемещаются в буфер до N МС за пределами курсоров записи (обычно N = 40 или т. д.). В бит на канале всегда записывает как можно больше данных в буферы, заполняя их вправо до их курсоров (или, возможно, 32 байт раньше, чтобы разрешить драйверы, которые неправильно сообщают о ходе выполнения курсора на воспроизведение).


      Используйте бит/канал, чтобы мимимизе сбой и использовать буферы 100 мс или больше, даже если игры не возникают на вашем тестовом оборудовании.
  - question: "Я воспроизводить одни и те же звуки очень часто и очень быстро, иногда они не воспроизводятся должным образом, или вызов Play () занимает много времени.   Что следует делать? \n"
    answer: >
      Задержка запуска (которая отличается от задержки потоковой передачи, упомянутой выше) может быть проблемой в случае некоторого оборудования (вызов Play () просто занимает много времени на определенных звуковых картах). Если вы действительно хотите уменьшить эту задержку, для твитч звуков (обойм, примеру и т. д.) очень удобно, чтобы некоторые буферы всегда были циклическими и воспроизводили тишину. Если необходимо воспроизвести твитч звук, выберите свободный буфер, посмотрите, где находится курсор записи, и вставьте звук в буфер сразу за пределами курсора Write. Некоторые саундкардс сбой Куерисуппорт для отложенных свойств, которые они поддерживают. Есть ли обходной путь? Вы могли бы просто Куерисуппорт для неотложенных версий свойств и все равно использовать отложенные параметры. Последние драйверы саундкард также могут устранить эту проблему.
  - question: "Разделы справки кодировать WAV файлы в WMA? \n"
    answer: >
      Обратитесь к документации по кодировщику Windows Media по адресу: Серия Windows Media Encoder 9.
  - question: "Разделы справки декодировать MP3-файлы с помощью DirectSound? \n"
    answer: >
      DirectSound изначально не поддерживает декодирование MP3. Вы можете самостоятельно декодировать файлы (используя кодек ACM в фильтре DirectShow) или просто использовать саму DirectShow, которая может выполнить декодирование. Затем можно скопировать результирующие аудиоданные PCM в буферы DirectSound.
- name: Расширения DirectX для псевдонима Maya
  questions:
  - question: "Почему мое НУРБС не отображается? \n"
    answer: >
      НУРБС не поддерживаются. Их можно преобразовать в сетки многоугольников.
  - question: >
      Почему мое Субдс не отображается?
    answer: >
      Субдс не поддерживаются. Их можно преобразовать в сетки многоугольников.
  - question: "Почему анимация в файле X выглядит иначе, чем анимация в окне предварительного просмотра? \n"
    answer: >
      Окно предварительного просмотра не является анимацией в строгом смысле важности. Он не воспроизводит анимацию, а синхронизируется с самым актуальным состоянием сцены Maya. При экспорте анимации матрицы в каждом преобразовании разбиваются на масштабирование, вращение (кватернион) и компоненты перевода (часто называются СРТС). СРТС являются более предпочтительными, чем матрицы, так как они прекрасно подходят, предоставляют более компактную форму данных и могут сжиматься независимо друг от друга. Не все матрицы могут разбиваться на СРТС. Если они не могут разбиваться, результирующий СРТС будет неизвестен, поэтому могут быть обнаружены небольшие ошибки в анимации. Эти две функции в Maya, которые чаще всего вызывают проблемы во время декомпозиции, обрабатываются, а также вращения и шкалы по центру. Если вы столкнулись с этой проблемой, так как вы используете вращение или масштабирование по центру, рассмотрите возможность добавления дополнительных преобразований, повышающих уровень иерархии.


      Где D3DX Animation поддерживает СРТС, он выглядит следующим образом:


      ``` syntax

      [S]x[R]x[T]

      ```


      Матрицы Maya гораздо сложнее, и для них требуется значительный объем дополнительного процесса, который выглядит следующим образом:


      ``` syntax

      [SpInv]x[S]x[Sh]x[Sp]x[St]x[RpInv]x[Ro]x[R]x[Rp]x[Rt]x[T]

      ```
  - question: "Я выберу мою сетку с Ригидскин, но сетка (или часть) не перемещается. Почему? \n"
    answer: >
      Жесткая обложка Maya в настоящее время не поддерживается. Используйте плавную обложку.
  - question: "Где все ОК исчезло в файле X? \n"
    answer: >
      X-файлы не поддерживают ОК. Вместо этого решения ОК помогутся в кадры, хранящиеся в файле X.
  - question: "Почему не отображается ни один из цветов материалов, кроме Директксшадерс? \n"
    answer: >
      Расширения DirectX для Maya в настоящее время поддерживают только материалы Директксшадер для предварительного просмотра и экспорта. В будущих версиях могут поддерживаться другие материалы.
- name: Ксинпут вопросы
  questions:
  - question: "Можно ли использовать Директинпут для чтения триггеров? \n"
    answer: >
      Да, но они действуют как одна и та же ось. Поэтому вы не можете читать триггеры независимо с помощью Директинпут. С помощью Ксинпут триггеры возвращают отдельные значения.


      Дополнительные сведения о том, почему Директинпут интерпретирует триггеры как одну ось, см. в разделе [Использование контроллера Xbox 360 с директинпут](/windows/desktop/xinput/xinput-and-directinput).
  - question: "Сколько контроллеров поддерживает Ксинпут? \n"
    answer: >
      Ксинпут поддерживает 4 контроллера, подключенных за раз.
  - question: "Поддерживает ли Ксинпут нестандартные контроллеры? \n"
    answer: >
      Нет, это не так.
  - question: "Доступны ли общие контроллеры через Директинпут? \n"
    answer: >
      Да, вы можете получить доступ к общим контроллерам с помощью Директинпут.
  - question: "Разделы справки получить отзыв о стандартных контроллерах? \n"
    answer: >
      Используйте функцию [**ксинпутсетстате**](/windows/desktop/api/xinput/nf-xinput-xinputsetstate) .
  - question: "Почему изменилось звуковое устройство по умолчанию? \n"
    answer: >
      При подключении гарнитуры Гарнитура контроллера выступает в качестве стандартного звукового устройства USB, поэтому при его подключении Windows автоматически изменится на использование этого USB-устройства аудио в качестве значения по умолчанию. Так как пользователь, скорее всего, не хочет, чтобы все аудио продвигаться по гарнитуре, ему придется вручную скорректировать его до первоначальной настройки.
  - question: "Разделы справки управлять индикаторами на контроллере? \n"
    answer: >
      Индикаторы контроллера определяются операционной системой и не могут быть изменены.
  - question: "Разделы справки получить доступ к кнопке Xbox 360 в разделе \"Мои приложения\"? \n"
    answer: >
      К сожалению, эта кнопка зарезервирована для будущего использования.
  - question: "Где можно получить драйверы? \n"
    answer: >
      Драйверы будут доступны через Центр обновления Windows.
  - question: "Как определяется идентификатор контроллера? \n"
    answer: >
      При запуске Ксинпут идентификатор определяется недетерминированным подсистемой Ксинпут и контроллерами, подключенными к. Если контроллеры подключены во время работы приложения Ксинпут, система присвоит новому контроллеру наименьшее доступное число. Если контроллер отключен, его число снова становится доступным.
  - question: "Разделы справки получить звуковые устройства для контроллера? \n"
    answer: >
      Используйте функцию [**ксинпутжетдсаундаудиодевицегуидс**](/windows/desktop/api/xinput/nf-xinput-xinputgetdsoundaudiodeviceguids) . Дополнительные сведения см. в примере аудиоконтроллер.
  - question: "Что делать, если контроллер не подключен? \n"
    answer: Если контроллер использовался проигрывателем, следует приостановить игру, пока контроллер не будет снова подключен, и игрок нажмет кнопку, чтобы сообщить о том, что они готовы к отправке.
